2020-05-26 14:06:13,933 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.9 (default, Apr 18 2020, 01:56:04) [GCC 8.4.0]
CUDA available: True
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.243
GPU 0: Tesla P100-PCIE-16GB
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.5.0+cu101
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_INTERNAL_THREADPOOL_IMPL -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.6.0+cu101
OpenCV: 4.1.2
MMCV: 0.5.6
MMDetection: 2.0.0+unknown
MMDetection Compiler: GCC 7.5
MMDetection CUDA Compiler: 10.1
------------------------------------------------------------

2020-05-26 14:06:13,933 - mmdet - INFO - Distributed training: False
2020-05-26 14:06:14,307 - mmdet - INFO - Config:
model = dict(
    type='FasterRCNN',
    pretrained='torchvision://resnet50',
    backbone=dict(
        type='ResNet',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch'),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),
    roi_head=dict(
        type='StandardRoIHead',
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', out_size=7, sample_num=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=dict(
            type='Shared2FCBBoxHead',
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=80,
            bbox_coder=dict(
                type='DeltaXYWHBBoxCoder',
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2]),
            reg_class_agnostic=False,
            loss_cls=dict(
                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type='L1Loss', loss_weight=1.0))))
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=256,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    rpn_proposal=dict(
        nms_across_levels=False,
        nms_pre=2000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=False,
            ignore_iof_thr=-1),
        sampler=dict(
            type='RandomSampler',
            num=512,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True),
        pos_weight=-1,
        debug=False))
test_cfg = dict(
    rpn=dict(
        nms_across_levels=False,
        nms_pre=1000,
        nms_post=1000,
        max_num=1000,
        nms_thr=0.7,
        min_bbox_size=0),
    rcnn=dict(
        score_thr=0.05, nms=dict(type='nms', iou_thr=0.5), max_per_img=100))
dataset_type = 'CocoDataset'
data_root = 'data/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file='data/train/_annotations.coco.json',
        img_prefix='data/train/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])
        ],
        classes=('bubble', )),
    val=dict(
        type='CocoDataset',
        ann_file='data/valid/_annotations.coco.json',
        img_prefix='data/valid/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('bubble', )),
    test=dict(
        type='CocoDataset',
        ann_file='data/test/_annotations.coco.json',
        img_prefix='data/test/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ],
        classes=('bubble', )))
evaluation = dict(interval=1, metric='bbox')
optimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[8, 11])
total_epochs = 12
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
classes = ('bubble', )
work_dir = './work_dirs/faster_rcnn_r50_fpn_1x_coco-bubble'
gpu_ids = range(0, 1)

2020-05-26 14:06:16,413 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

2020-05-26 14:06:26,661 - mmdet - INFO - Start running, host: root@09da70fac478, work_dir: /content/bubble-detection/work_dirs/faster_rcnn_r50_fpn_1x_coco-bubble
2020-05-26 14:06:26,661 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2020-05-26 14:06:37,143 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:06:37,317 - mmdet - INFO - Epoch [1][30/30]	lr: 0.00118, bbox_mAP: 0.0020, bbox_mAP_50: 0.0110, bbox_mAP_75: 0.0000, bbox_mAP_s: 0.1660, bbox_mAP_m: 0.0000, bbox_mAP_l: 0.0400, bbox_mAP_copypaste: 0.002 0.011 0.000 0.166 0.000 0.040
2020-05-26 14:06:47,681 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:06:47,849 - mmdet - INFO - Epoch [2][30/30]	lr: 0.00238, bbox_mAP: 0.1950, bbox_mAP_50: 0.4880, bbox_mAP_75: 0.0240, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.1690, bbox_mAP_l: 0.3320, bbox_mAP_copypaste: 0.195 0.488 0.024 0.000 0.169 0.332
2020-05-26 14:06:58,418 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:06:58,582 - mmdet - INFO - Epoch [3][30/30]	lr: 0.00358, bbox_mAP: 0.2210, bbox_mAP_50: 0.6840, bbox_mAP_75: 0.0770, bbox_mAP_s: 0.0000, bbox_mAP_m: 0.2260, bbox_mAP_l: 0.3310, bbox_mAP_copypaste: 0.221 0.684 0.077 0.000 0.226 0.331
2020-05-26 14:07:09,248 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:07:09,398 - mmdet - INFO - Epoch [4][30/30]	lr: 0.00478, bbox_mAP: 0.4690, bbox_mAP_50: 0.9020, bbox_mAP_75: 0.4550, bbox_mAP_s: 0.0780, bbox_mAP_m: 0.4480, bbox_mAP_l: 0.5950, bbox_mAP_copypaste: 0.469 0.902 0.455 0.078 0.448 0.595
2020-05-26 14:07:19,834 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:07:19,978 - mmdet - INFO - Epoch [5][30/30]	lr: 0.00597, bbox_mAP: 0.5060, bbox_mAP_50: 0.9430, bbox_mAP_75: 0.4390, bbox_mAP_s: 0.1860, bbox_mAP_m: 0.4840, bbox_mAP_l: 0.5960, bbox_mAP_copypaste: 0.506 0.943 0.439 0.186 0.484 0.596
2020-05-26 14:07:30,318 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:07:30,463 - mmdet - INFO - Epoch [6][30/30]	lr: 0.00717, bbox_mAP: 0.5470, bbox_mAP_50: 0.9360, bbox_mAP_75: 0.5610, bbox_mAP_s: 0.0660, bbox_mAP_m: 0.5460, bbox_mAP_l: 0.6340, bbox_mAP_copypaste: 0.547 0.936 0.561 0.066 0.546 0.634
2020-05-26 14:07:40,836 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:07:40,953 - mmdet - INFO - Epoch [7][30/30]	lr: 0.00837, bbox_mAP: 0.6870, bbox_mAP_50: 0.9730, bbox_mAP_75: 0.8470, bbox_mAP_s: 0.5000, bbox_mAP_m: 0.6690, bbox_mAP_l: 0.7890, bbox_mAP_copypaste: 0.687 0.973 0.847 0.500 0.669 0.789
2020-05-26 14:07:51,306 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:07:51,392 - mmdet - INFO - Epoch [8][30/30]	lr: 0.00957, bbox_mAP: 0.5590, bbox_mAP_50: 0.9800, bbox_mAP_75: 0.5480, bbox_mAP_s: 0.3010, bbox_mAP_m: 0.5200, bbox_mAP_l: 0.7140, bbox_mAP_copypaste: 0.559 0.980 0.548 0.301 0.520 0.714
2020-05-26 14:08:01,890 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:08:01,971 - mmdet - INFO - Epoch [9][30/30]	lr: 0.00108, bbox_mAP: 0.7330, bbox_mAP_50: 0.9800, bbox_mAP_75: 0.8630, bbox_mAP_s: 0.5010, bbox_mAP_m: 0.7060, bbox_mAP_l: 0.8650, bbox_mAP_copypaste: 0.733 0.980 0.863 0.501 0.706 0.865
2020-05-26 14:08:12,379 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:08:12,478 - mmdet - INFO - Epoch [10][30/30]	lr: 0.00120, bbox_mAP: 0.7100, bbox_mAP_50: 0.9800, bbox_mAP_75: 0.8950, bbox_mAP_s: 0.5010, bbox_mAP_m: 0.6900, bbox_mAP_l: 0.8110, bbox_mAP_copypaste: 0.710 0.980 0.895 0.501 0.690 0.811
2020-05-26 14:08:22,960 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:08:23,058 - mmdet - INFO - Epoch [11][30/30]	lr: 0.00132, bbox_mAP: 0.7100, bbox_mAP_50: 0.9800, bbox_mAP_75: 0.8810, bbox_mAP_s: 0.4510, bbox_mAP_m: 0.6890, bbox_mAP_l: 0.8090, bbox_mAP_copypaste: 0.710 0.980 0.881 0.451 0.689 0.809
2020-05-26 14:08:33,540 - mmdet - INFO - Evaluating bbox...
2020-05-26 14:08:33,636 - mmdet - INFO - Epoch [12][30/30]	lr: 0.00014, bbox_mAP: 0.7260, bbox_mAP_50: 0.9800, bbox_mAP_75: 0.9080, bbox_mAP_s: 0.4510, bbox_mAP_m: 0.6990, bbox_mAP_l: 0.8490, bbox_mAP_copypaste: 0.726 0.980 0.908 0.451 0.699 0.849
